/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  ListNode* reverse(ListNode* head) {
        struct ListNode *prev, *curr, *nxt;
        prev = NULL;
        curr = head;
        if(head)
            nxt = head->next;
        while(curr)
        {
            curr->next = prev;
            prev = curr;
            curr = nxt;
            if(nxt)
                nxt = nxt->next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        struct ListNode *p = head;
        int count = 0;

        while(p)
        {
            p = p->next;
            count++;
        } 
        p = head;
        for(int i =0 ; i < count/2; i++)
            p = p->next;
        
        p = reverse(p);
        while(head && p)
        {
            if(head->val != p->val)
                return false;
            head = head->next;
            p = p->next;
        }
        return true;
    }
};
